git:
  depth: false

matrix:
  include:

    ###############################################################################
    # OSX Debug
    ###############################################################################
    # DISABLED, since we don't check it
    #- os: osx
    #  language: cpp
    #  cache: ccache
    #  osx_image: xcode10.1
    #  install:
    #    - export TZ=Etc/GMT-3
    #    - brew update
    #    - brew unlink cmake
    #    - brew install cmake
    #    - brew link cmake
    #    - brew install ccache
    #    - export PATH="/usr/local/opt/ccache/libexec:$PATH"
    #    - brew uninstall --ignore-dependencies boost
    #    - curl -O https://raw.githubusercontent.com/Homebrew/homebrew-core/5da5895add2f6b9320d654dd844d4827f6876c8b/Formula/boost.rb
    #    - brew install ./boost.rb
    #    - export OPENSSL_ROOT_DIR="/usr/local/opt/openssl@1.1"
    #  env:
    #    - BUILD_TYPE=Debug
    #    - OS_FOLDER=mac
    #  script:
    #    - git apply 3rdparty/protobuf-patch.diff
    #    - cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBRANCH_NAME=$TRAVIS_BRANCH -DHDS_HW_WALLET=Off .
    #    - make -j$(sysctl -n hw.ncpu)
    #    - ctest --verbose
    #    # extract build version
    #    - HDS_VERSION="$(cat hds_version.gen)" && rm hds_version.gen
    #    - echo HDS_VERSION = $HDS_VERSION

    ###############################################################################
    # OSX Release
    ###############################################################################

    - os: osx
      language: cpp
      cache: ccache
      osx_image: xcode10.1
      install:
        - export TZ=GMT-3
        - sudo systemsetup -gettimezone
        - brew update
        - brew unlink cmake
        - brew install cmake
        - brew link cmake
        - brew install ccache
        - export PATH="/usr/local/opt/ccache/libexec:$PATH"
        - brew upgrade --ignore-pinned icu4c
        - brew uninstall --ignore-dependencies sfcgal
        - brew uninstall --ignore-dependencies cgal
        - brew uninstall --ignore-dependencies node
        - brew uninstall --ignore-dependencies postgresql
        - brew uninstall --ignore-dependencies postgis
        - brew uninstall --ignore-dependencies boost
        - curl -O https://raw.githubusercontent.com/Homebrew/homebrew-core/5da5895add2f6b9320d654dd844d4827f6876c8b/Formula/boost.rb
        - brew install ./boost.rb
        - export OPENSSL_ROOT_DIR="/usr/local/opt/openssl@1.1"
        - openssl aes-256-cbc -K $encrypted_1f9ebee66ea9_key -iv $encrypted_1f9ebee66ea9_iv -in macos_cert.enc -out macos_cert.tar -d
        - tar xvf macos_cert.tar
        # create custom keychain
        - security create-keychain -p travis macos-build.keychain
        - security default-keychain -s macos-build.keychain
        - security unlock-keychain -p travis macos-build.keychain
        - security set-keychain-settings -t 3600 -l ~/Library/Keychains/macos-build.keychain
        # import certificates
        - security import distkey.p12 -P $MACOS_DISTRIBUTION_KEY_PASSWORD  -k ~/Library/Keychains/macos-build.keychain -T /usr/bin/codesign
        - security import devapp.cer -k ~/Library/Keychains/macos-build.keychain -T /usr/bin/codesign
        - security set-key-partition-list -S "apple-tool:,apple:" -s -k travis macos-build.keychain
      env:
        - BUILD_TYPE=Release
        - OS_FOLDER=mac
      script:
        - git apply 3rdparty/protobuf-patch.diff
        - cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DDEBUG_MESSAGES_IN_RELEASE_MODE=On -DHDS_LINK_TYPE=Static -DBRANCH_NAME=$TRAVIS_BRANCH -DHDS_SIGN_MACOS_BINARY=On -DHDS_HW_WALLET=Off .
        - make -j$(sysctl -n hw.ncpu)
#        - ctest --verbose
        # extract build version
        - HDS_VERSION="$(cat hds_version.gen)" && rm hds_version.gen
        - echo HDS_VERSION = $HDS_VERSION
        # sign our builds
        - codesign --deep --force -v -s "$MACOS_SIGN_IDENTITY" -o runtime --timestamp hds/hds-node$HDS_TARGET_SUFFIX
        - codesign --deep --force -v -s "$MACOS_SIGN_IDENTITY" -o runtime --timestamp wallet/cli/hds-wallet$HDS_TARGET_SUFFIX
        - codesign --deep --force -v -s "$MACOS_SIGN_IDENTITY" -o runtime --timestamp wallet/api/wallet-api$HDS_TARGET_SUFFIX
        - codesign --deep --force -v -s "$MACOS_SIGN_IDENTITY" -o runtime --timestamp explorer/explorer-node$HDS_TARGET_SUFFIX

    ###############################################################################
    # IOS OS64 SIMULATOR64 COMBINED
    ###############################################################################

    - os: osx
      language: cpp
      cache: ccache
      osx_image: xcode10.1
      install:
        - export TZ=GMT-3
        - brew update
        - brew unlink cmake
        - brew install cmake ccache
        - brew link cmake
        - export PATH="/usr/local/opt/ccache/libexec:$PATH"
        - brew uninstall --ignore-dependencies boost
        - git clone --depth=1 https://github.com/hadescoincom/boost-ios.git /Users/travis/boost-ios
        - git clone --depth=1 https://github.com/hadescoincom/boost-ios-simulator.git /Users/travis/boost-ios-simulator
        - git clone --depth=1 https://github.com/hadescoincom/openssl-ios.git /Users/travis/openssl-ios
        - git clone --depth=1 https://github.com/leetal/ios-cmake.git /Users/travis/toolchain-ios
      env:
        - BUILD_TYPE=Release
        - OPENSSL_ROOT_DIR="/Users/travis/openssl-ios/"
        - OPENSSL_CRYPTO_LIBRARY="/Users/travis/openssl-ios/lib/libcrypto.a"
        - OPENSSL_INCLUDE_DIR="/Users/travis/openssl-ios/include"
        - OPENSSL_SSL_LIBRARY="/Users/travis/openssl-ios/lib/libssl.a"
        - OPENSSL_LIBRARIES="/Users/travis/openssl-ios/lib"
      script:
        - git apply 3rdparty/protobuf-patch.diff
        - export BOOST_ROOT_IOS="/Users/travis/boost-ios"
        - cmake . -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=/Users/travis/toolchain-ios/ios.toolchain.cmake -DPLATFORM=OS64 -DCMAKE_CXX_FLAGS=-stdlib=libc++ -DDEPLOYMENT_TARGET=11.0 -DENABLE_BITCODE=NO -DOPENSSL_ROOT_DIR=$OPENSSL_ROOT_DIR -DOPENSSL_CRYPTO_LIBRARY=$OPENSSL_CRYPTO_LIBRARY -DOPENSSL_INCLUDE_DIR=$OPENSSL_INCLUDE_DIR -DOPENSSL_SSL_LIBRARY=$OPENSSL_SSL_LIBRARY -DOPENSSL_LIBRARIES=$OPENSSL_LIBRARIES -DIOS=YES -Wno-error=deprecated-declarations -Wno-error=deprecated -DCMAKE_TRY_COMPILE_PLATFORM_VARIABLES=CMAKE_WARN_DEPRECATED -B./build
        - make -C ./build -j$(sysctl -n hw.ncpu)
        - export BOOST_ROOT_IOS="/Users/travis/boost-ios-simulator"
        - cmake . -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=/Users/travis/toolchain-ios/ios.toolchain.cmake -DPLATFORM=SIMULATOR64 -DCMAKE_CXX_FLAGS=-stdlib=libc++ -DDEPLOYMENT_TARGET=11.0 -DENABLE_BITCODE=NO -DOPENSSL_ROOT_DIR=$OPENSSL_ROOT_DIR -DOPENSSL_CRYPTO_LIBRARY=$OPENSSL_CRYPTO_LIBRARY -DOPENSSL_INCLUDE_DIR=$OPENSSL_INCLUDE_DIR -DOPENSSL_SSL_LIBRARY=$OPENSSL_SSL_LIBRARY -DOPENSSL_LIBRARIES=$OPENSSL_LIBRARIES -DIOS=YES -Wno-error=deprecated-declarations -Wno-error=deprecated -DCMAKE_TRY_COMPILE_PLATFORM_VARIABLES=CMAKE_WARN_DEPRECATED -B./build-simulator
        - make -C ./build-simulator -j$(sysctl -n hw.ncpu)
      after_success:
        # extract build version
        - HDS_VERSION="$(cat hds_version.gen)" && rm hds_version.gen
        - echo HDS_VERSION = $HDS_VERSION
        - mkdir -p /Users/travis/hds-ios/include
        - mkdir -p /Users/travis/hds-ios/lib
        - find ./build -name \*.a -type f -exec cp {} /Users/travis/hds-ios/lib/ \;
        - rsync -am --include='*.h' --include='*.hpp' --include='*/' --exclude='*' . /Users/travis/hds-ios/include/
        - mkdir -p /Users/travis/hds-ios-simulator/include
        - mkdir -p /Users/travis/hds-ios-simulator/lib
        - find ./build-simulator -name \*.a -type f -exec cp {} /Users/travis/hds-ios-simulator/lib/ \;
        - rsync -am --include='*.h' --include='*.hpp' --include='*/' --exclude='*' . /Users/travis/hds-ios-simulator/include/
        - mkdir -p /Users/travis/hds-ios-combined/include
        - mkdir -p /Users/travis/hds-ios-combined/lib
        - find /Users/travis/hds-ios/lib -type f -print0 | while IFS= read -r -d $'\0' file; do lipo -create -output /Users/travis/hds-ios-combined/lib/$(basename "$file") "$file" /Users/travis/hds-ios-simulator/lib/$(basename "$file"); done;
        - rsync -am --include='*.h' --include='*.hpp' --include='*/' --exclude='*' . /Users/travis/hds-ios-combined/include/
        - BUILDS_SERVER_PATH=${BUILD_SERVER}/files/$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/ios
        - BUILDS_SERVER_LATEST_PATH=${BUILD_SERVER}/files/$TRAVIS_BRANCH/latest/$BUILD_TYPE/ios
        - tar -cvzf hds-ios-$HDS_VERSION.tar.gz -C /Users/travis hds-ios
        - cp hds-ios-$HDS_VERSION.tar.gz hds-ios.tar.gz
        - tar -cvzf hds-ios-simulator-$HDS_VERSION.tar.gz -C /Users/travis hds-ios-simulator
        - cp hds-ios-simulator-$HDS_VERSION.tar.gz hds-ios-simulator.tar.gz
        - tar -cvzf hds-ios-combined-$HDS_VERSION.tar.gz -C /Users/travis hds-ios-combined
        - cp hds-ios-combined-$HDS_VERSION.tar.gz hds-ios-combined.tar.gz
        - curl --retry 3 --ftp-create-dirs -T hds-ios-$HDS_VERSION.tar.gz $BUILDS_SERVER_PATH/
        - curl --retry 3 --ftp-create-dirs -T hds-ios.tar.gz $BUILDS_SERVER_LATEST_PATH/
        - artifacts upload --target-paths "$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/ios/" hds-ios-$HDS_VERSION.tar.gz
        - artifacts upload --target-paths "$TRAVIS_BRANCH/latest/$BUILD_TYPE/ios/" hds-ios.tar.gz
        - curl --retry 3 --ftp-create-dirs -T hds-ios-simulator-$HDS_VERSION.tar.gz $BUILDS_SERVER_PATH/
        - curl --retry 3 --ftp-create-dirs -T hds-ios-simulator.tar.gz $BUILDS_SERVER_LATEST_PATH/
        - artifacts upload --target-paths "$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/ios/" hds-ios-simulator-$HDS_VERSION.tar.gz
        - artifacts upload --target-paths "$TRAVIS_BRANCH/latest/$BUILD_TYPE/ios/" hds-ios-simulator.tar.gz
        - curl --retry 3 --ftp-create-dirs -T hds-ios-combined-$HDS_VERSION.tar.gz $BUILDS_SERVER_PATH/
        - curl --retry 3 --ftp-create-dirs -T hds-ios-combined.tar.gz $BUILDS_SERVER_LATEST_PATH/
        - artifacts upload --target-paths "$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/ios/" hds-ios-combined-$HDS_VERSION.tar.gz
        - artifacts upload --target-paths "$TRAVIS_BRANCH/latest/$BUILD_TYPE/ios/" hds-ios-combined.tar.gz

    ###############################################################################
    # Linux Debug
    ###############################################################################
    # DISABLED, since we don't check it
    #- os: linux
    #  dist: trusty
    #  language: cpp
    #  cache: ccache
    #  addons:
    #    apt:
    #      update: true
    #      sources:
    #        - ubuntu-toolchain-r-test
    #      packages:
    #        - g++-7
    #        - libssl-dev
    #        - curl
    #  install:
    #    - export TZ=Etc/GMT-3
    #    # install new version cmake
    #    - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
    #    - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
    #    - travis_retry wget --no-check-certificate https://github.com/Kitware/CMake/releases/download/v3.14.0/cmake-3.14.0-Linux-x86_64.tar.gz
    #    - tar -xvf cmake-3.14.0-Linux-x86_64.tar.gz > /dev/null
    #    - mv cmake-3.14.0-Linux-x86_64 cmake-install
    #    - PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH
    #    - cd ${TRAVIS_BUILD_DIR}
    #    - cmake --version
    #    - sudo git clone --depth=1 https://github.com/hadescoincom/boost-linux.git /usr/local/boost_1_69_0
    #    - export BOOST_ROOT="/usr/local/boost_1_69_0"
    #    - eval "CC=gcc-7 && CXX=g++-7"
    #  env:
    #    - BUILD_TYPE=Debug
    #    - OS_FOLDER=linux
    #  script:
    #    - git apply 3rdparty/protobuf-patch.diff
    #    - cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBRANCH_NAME=$TRAVIS_BRANCH -DHDS_HW_WALLET=Off .
    #    - make -j$(nproc)
    #    - ctest --verbose
    #    # extract build version
    #    - HDS_VERSION="$(cat hds_version.gen)" && rm hds_version.gen
    #    - echo HDS_VERSION = $HDS_VERSION

    ###############################################################################
    # Linux Release
    ###############################################################################

    - os: linux
      dist: trusty
      language: cpp
      cache: ccache
      addons:
        apt:
          update: true
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
            - libssl-dev
            - curl
            - libxi-dev
            - libcups2-dev
      install:
        - export TZ=Etc/GMT-3
        # install new version cmake
        - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
        - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
        - travis_retry wget --no-check-certificate https://github.com/Kitware/CMake/releases/download/v3.14.0/cmake-3.14.0-Linux-x86_64.tar.gz
        - tar -xvf cmake-3.14.0-Linux-x86_64.tar.gz > /dev/null
        - mv cmake-3.14.0-Linux-x86_64 cmake-install
        - PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH
        - cd ${TRAVIS_BUILD_DIR}
        - cmake --version
        - sudo git clone --depth=1 https://github.com/hadescoincom/boost-linux.git /usr/local/boost_1_69_0
        - export BOOST_ROOT="/usr/local/boost_1_69_0"
        - eval "CC=gcc-7 && CXX=g++-7"
      env:
        - BUILD_TYPE=Release
        - OS_FOLDER=linux
      script:
        - git apply 3rdparty/protobuf-patch.diff
        - cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DDEBUG_MESSAGES_IN_RELEASE_MODE=On -DHDS_LINK_TYPE=Static -DBRANCH_NAME=$TRAVIS_BRANCH -DHDS_HW_WALLET=Off .
        - make -j$(nproc)
#        - ctest --verbose
        # extract build version
        - HDS_VERSION="$(cat hds_version.gen)" && rm hds_version.gen
        - echo HDS_VERSION = $HDS_VERSION

    ###############################################################################
    # Android x86 Release
    ###############################################################################

    - os: linux
      dist: trusty
      language: android
      env:
        - ANDROID_ABI=x86
        - BUILD_TYPE=Release
        - ANDROID_SDK_VERSION=23
      android:
        components:
          - tools
          - platform-tools
          - android-23
      install:
        - echo y | sdkmanager "ndk-bundle"
        - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
        - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
        - travis_retry wget --no-check-certificate https://github.com/Kitware/CMake/releases/download/v3.14.0/cmake-3.14.0-Linux-x86_64.tar.gz
        - tar -xvf cmake-3.14.0-Linux-x86_64.tar.gz > /dev/null
        - mv cmake-3.14.0-Linux-x86_64 cmake-install
        - PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH
        - cd ${TRAVIS_BUILD_DIR}
        - cmake --version
        - sudo git clone --depth=1 https://github.com/hadescoincom/boost-android.git /usr/local/boost_1_68-android
        - sudo git clone --depth=1 https://github.com/hadescoincom/openssl-android.git /usr/local/Prebuilt-OpenSSL-Android
        - export ANDROID_NDK_HOME=$ANDROID_HOME/ndk-bundle
        - export BOOST_ROOT_ANDROID=/usr/local/boost_1_68-android
        - export OPENSSL_ROOT_DIR_ANDROID=/usr/local/Prebuilt-OpenSSL-Android
        - export PATH=$ANDROID_NDK_HOME:$PATH
      script:
        - cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_NATIVE_API_LEVEL=$ANDROID_SDK_VERSION -DANDROID_ABI=$ANDROID_ABI -DCMAKE_BUILD_TYPE=$BUILD_TYPE .
        - make wallet-jni -j$(nproc)
      after_success:
        # extract build version
        - HDS_VERSION="$(cat hds_version.gen)" && rm hds_version.gen
        - echo HDS_VERSION = $HDS_VERSION
        - BUILDS_SERVER_PATH=${BUILD_SERVER}/files/$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/android-$ANDROID_ABI
        - BUILDS_SERVER_LATEST_PATH=${BUILD_SERVER}/files/$TRAVIS_BRANCH/latest/$BUILD_TYPE/android-$ANDROID_ABI
        - tar -cvzf libwallet-jni-$HDS_VERSION.tar.gz --directory=$HOME/build/hadescoincom/hds-core/android libwallet-jni.so com
        - tar -cvzf libwallet-jni.tar.gz --directory=$HOME/build/hadescoincom/hds-core/android libwallet-jni.so com
        - curl --retry 3 --ftp-create-dirs -T libwallet-jni-$HDS_VERSION.tar.gz $BUILDS_SERVER_PATH/
        - curl --retry 3 --ftp-create-dirs -T libwallet-jni.tar.gz $BUILDS_SERVER_LATEST_PATH/
        - artifacts upload --target-paths "$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/android-$ANDROID_ABI/" libwallet-jni-$HDS_VERSION.tar.gz
        - artifacts upload --target-paths "$TRAVIS_BRANCH/latest/$BUILD_TYPE/android-$ANDROID_ABI/" libwallet-jni.tar.gz

    ###############################################################################
    # Android x86_64 Release
    ###############################################################################

    - os: linux
      dist: trusty
      language: android
      env:
        - ANDROID_ABI=x86_64
        - BUILD_TYPE=Release
        - ANDROID_SDK_VERSION=23
      android:
        components:
          - tools
          - platform-tools
          - android-23
      install:
        - echo y | sdkmanager "ndk-bundle"
        - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
        - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
        - travis_retry wget --no-check-certificate https://github.com/Kitware/CMake/releases/download/v3.14.0/cmake-3.14.0-Linux-x86_64.tar.gz
        - tar -xvf cmake-3.14.0-Linux-x86_64.tar.gz > /dev/null
        - mv cmake-3.14.0-Linux-x86_64 cmake-install
        - PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH
        - cd ${TRAVIS_BUILD_DIR}
        - cmake --version
        - sudo git clone --depth=1 https://github.com/hadescoincom/boost-android.git /usr/local/boost_1_68-android
        - sudo git clone --depth=1 https://github.com/hadescoincom/openssl-android.git /usr/local/Prebuilt-OpenSSL-Android
        - export ANDROID_NDK_HOME=$ANDROID_HOME/ndk-bundle
        - export BOOST_ROOT_ANDROID=/usr/local/boost_1_68-android
        - export OPENSSL_ROOT_DIR_ANDROID=/usr/local/Prebuilt-OpenSSL-Android
        - export PATH=$ANDROID_NDK_HOME:$PATH
      script:
        - cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_NATIVE_API_LEVEL=$ANDROID_SDK_VERSION -DANDROID_ABI=$ANDROID_ABI -DCMAKE_BUILD_TYPE=$BUILD_TYPE .
        - make wallet-jni -j$(nproc)
      after_success:
        # extract build version
        - HDS_VERSION="$(cat hds_version.gen)" && rm hds_version.gen
        - echo HDS_VERSION = $HDS_VERSION
        - BUILDS_SERVER_PATH=${BUILD_SERVER}/files/$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/android-$ANDROID_ABI
        - BUILDS_SERVER_LATEST_PATH=${BUILD_SERVER}/files/$TRAVIS_BRANCH/latest/$BUILD_TYPE/android-$ANDROID_ABI
        - tar -cvzf libwallet-jni-$HDS_VERSION.tar.gz --directory=$HOME/build/hadescoincom/hds-core/android libwallet-jni.so com
        - tar -cvzf libwallet-jni.tar.gz --directory=$HOME/build/hadescoincom/hds-core/android libwallet-jni.so com
        - curl --retry 3 --ftp-create-dirs -T libwallet-jni-$HDS_VERSION.tar.gz $BUILDS_SERVER_PATH/
        - curl --retry 3 --ftp-create-dirs -T libwallet-jni.tar.gz $BUILDS_SERVER_LATEST_PATH/
        - artifacts upload --target-paths "$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/android-$ANDROID_ABI/" libwallet-jni-$HDS_VERSION.tar.gz
        - artifacts upload --target-paths "$TRAVIS_BRANCH/latest/$BUILD_TYPE/android-$ANDROID_ABI/" libwallet-jni.tar.gz

    ###############################################################################
    # Android ARMv7 Release
    ###############################################################################

    - os: linux
      dist: trusty
      language: android
      env:
        - ANDROID_ABI=armeabi-v7a
        - BUILD_TYPE=Release
        - ANDROID_SDK_VERSION=23
      android:
        components:
          - tools
          - platform-tools
          - android-23
      install:
        - echo y | sdkmanager "ndk-bundle"
        - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
        - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
        - travis_retry wget --no-check-certificate https://github.com/Kitware/CMake/releases/download/v3.14.0/cmake-3.14.0-Linux-x86_64.tar.gz
        - tar -xvf cmake-3.14.0-Linux-x86_64.tar.gz > /dev/null
        - mv cmake-3.14.0-Linux-x86_64 cmake-install
        - PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH
        - cd ${TRAVIS_BUILD_DIR}
        - cmake --version
        - sudo git clone --depth=1 https://github.com/hadescoincom/boost-android.git /usr/local/boost_1_68-android
        - sudo git clone --depth=1 https://github.com/hadescoincom/openssl-android.git /usr/local/Prebuilt-OpenSSL-Android
        - export ANDROID_NDK_HOME=$ANDROID_HOME/ndk-bundle
        - export BOOST_ROOT_ANDROID=/usr/local/boost_1_68-android
        - export OPENSSL_ROOT_DIR_ANDROID=/usr/local/Prebuilt-OpenSSL-Android
        - export PATH=$ANDROID_NDK_HOME:$PATH
      script:
        - cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_NATIVE_API_LEVEL=$ANDROID_SDK_VERSION -DANDROID_ABI=$ANDROID_ABI -DCMAKE_BUILD_TYPE=$BUILD_TYPE .
        - make wallet-jni -j$(nproc)
      after_success:
        # extract build version
        - HDS_VERSION="$(cat hds_version.gen)" && rm hds_version.gen
        - echo HDS_VERSION = $HDS_VERSION
        - BUILDS_SERVER_PATH=${BUILD_SERVER}/files/$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/android-$ANDROID_ABI
        - BUILDS_SERVER_LATEST_PATH=${BUILD_SERVER}/files/$TRAVIS_BRANCH/latest/$BUILD_TYPE/android-$ANDROID_ABI
        - tar -cvzf libwallet-jni-$HDS_VERSION.tar.gz --directory=$HOME/build/hadescoincom/hds-core/android libwallet-jni.so com
        - tar -cvzf libwallet-jni.tar.gz --directory=$HOME/build/hadescoincom/hds-core/android libwallet-jni.so com
        - curl --retry 3 --ftp-create-dirs -T libwallet-jni-$HDS_VERSION.tar.gz $BUILDS_SERVER_PATH/
        - curl --retry 3 --ftp-create-dirs -T libwallet-jni.tar.gz $BUILDS_SERVER_LATEST_PATH/
        - artifacts upload --target-paths "$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/android-$ANDROID_ABI/" libwallet-jni-$HDS_VERSION.tar.gz
        - artifacts upload --target-paths "$TRAVIS_BRANCH/latest/$BUILD_TYPE/android-$ANDROID_ABI/" libwallet-jni.tar.gz

    ###############################################################################
    # Android ARMv8 Release
    ###############################################################################

    - os: linux
      dist: trusty
      language: android
      env:
        - ANDROID_ABI=arm64-v8a
        - BUILD_TYPE=Release
        - ANDROID_SDK_VERSION=23
      android:
        components:
          - tools
          - platform-tools
          - android-23
      install:
        - echo y | sdkmanager "ndk-bundle"
        - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
        - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
        - travis_retry wget --no-check-certificate https://github.com/Kitware/CMake/releases/download/v3.14.0/cmake-3.14.0-Linux-x86_64.tar.gz
        - tar -xvf cmake-3.14.0-Linux-x86_64.tar.gz > /dev/null
        - mv cmake-3.14.0-Linux-x86_64 cmake-install
        - PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH
        - cd ${TRAVIS_BUILD_DIR}
        - cmake --version
        - sudo git clone --depth=1 https://github.com/hadescoincom/boost-android.git /usr/local/boost_1_68-android
        - sudo git clone --depth=1 https://github.com/hadescoincom/openssl-android.git /usr/local/Prebuilt-OpenSSL-Android
        - export ANDROID_NDK_HOME=$ANDROID_HOME/ndk-bundle
        - export BOOST_ROOT_ANDROID=/usr/local/boost_1_68-android
        - export OPENSSL_ROOT_DIR_ANDROID=/usr/local/Prebuilt-OpenSSL-Android
        - export PATH=$ANDROID_NDK_HOME:$PATH
      script:
        - cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_NATIVE_API_LEVEL=$ANDROID_SDK_VERSION -DANDROID_ABI=$ANDROID_ABI -DCMAKE_BUILD_TYPE=$BUILD_TYPE .
        - make wallet-jni -j$(nproc)
      after_success:
        # extract build version
        - HDS_VERSION="$(cat hds_version.gen)" && rm hds_version.gen
        - echo HDS_VERSION = $HDS_VERSION
        - BUILDS_SERVER_PATH=${BUILD_SERVER}/files/$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/android-$ANDROID_ABI
        - BUILDS_SERVER_LATEST_PATH=${BUILD_SERVER}/files/$TRAVIS_BRANCH/latest/$BUILD_TYPE/android-$ANDROID_ABI
        - tar -cvzf libwallet-jni-$HDS_VERSION.tar.gz --directory=$HOME/build/hadescoincom/hds-core/android libwallet-jni.so com
        - tar -cvzf libwallet-jni.tar.gz --directory=$HOME/build/hadescoincom/hds-core/android libwallet-jni.so com
        - curl --retry 3 --ftp-create-dirs -T libwallet-jni-$HDS_VERSION.tar.gz $BUILDS_SERVER_PATH/
        - curl --retry 3 --ftp-create-dirs -T libwallet-jni.tar.gz $BUILDS_SERVER_LATEST_PATH/
        - artifacts upload --target-paths "$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/android-$ANDROID_ABI/" libwallet-jni-$HDS_VERSION.tar.gz
        - artifacts upload --target-paths "$TRAVIS_BRANCH/latest/$BUILD_TYPE/android-$ANDROID_ABI/" libwallet-jni.tar.gz

    ###############################################################################
    # Key Keeper Web Assembly Release
    ###############################################################################

    - os: linux
      dist: bionic
      language: cpp
      env:
        - TARGET_TYPE=wasm
        - BUILD_TYPE=MinSizeRel
      sudo: required
      services:
        - docker
      install:
        - docker run -e BOOST_ROOT='/usr/local/boost_1_69_0' -dit --name emscripten -v $(pwd):/src trzeci/emscripten:sdk-incoming-64bit bash
      script:
        - docker exec -it emscripten git clone --depth=1 https://github.com/hadescoincom/boost-linux.git /usr/local/boost_1_69_0
        - docker exec -it emscripten emcmake cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE keykeeper
        - docker exec -it emscripten make -j$(nproc)
      after_success:
        - tar -cvzf wasm-key-keeper.tar.gz wasm-key-keeper.*
        - BUILDS_SERVER_PATH=${BUILD_SERVER}/files/$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/$TARGET_TYPE
        - curl --retry 3 --ftp-create-dirs -T wasm-key-keeper.tar.gz $BUILDS_SERVER_PATH/
        - artifacts upload --target-paths "$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/$TARGET_TYPE/" wasm-key-keeper.tar.gz

###############################################################################
# Service balancer
###############################################################################
#
#    - os: linux
#      dist: bionic
#      language: go
#       env:
#         - TARGET_TYPE=go
#         - BUILD_TYPE=Release
#         - GOOS=linux
#         - GOARCH=amd64
#       go:
#         - 1.13.x
#       install:
#         - export BALANCER_PATH=wallet/service-balancer
#     script:
#         - cd $HOME/build/hadescoincom/hds-core/wallet/service-balancer/ && go build
#       after_success:
#         - tar cvzf service-balancer.tar.gz --directory=$HOME/build/hadescoincom/hds-core/wallet/service-balancer/ service-balancer  config.json
#         - cd $HOME/build/hadescoincom/hds-core/wallet/service-balancer && ls
#         - BUILDS_SERVER_PATH=${BUILD_SERVER}/files/$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/$TARGET_TYPE
#         - curl --retry 3 --ftp-create-dirs -T service-balancer.tar.gz $BUILDS_SERVER_PATH/
#         - artifacts upload --target-paths "$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/$TARGET_TYPE/" service-balancer.tar.gz
#         - artifacts upload --target-paths "$TRAVIS_BRANCH/latest/$BUILD_TYPE/$TARGET_TYPE/" service-balancer.tar.gz

###############################################################################
# Common part
###############################################################################
#before_script:
#  - curl -sL https://raw.githubusercontent.com/travis-ci/artifacts/master/install | bash
#  - HDS_TARGET_SUFFIX="-masternet"
#  - HDS_DISPLAY_SUFFIX="Masternet"
#  - HDS_DISPLAY_SUFFIX2="-Masternet"

#after_success:
#  # deploy using ftp server
#  - BUILDS_SERVER_PATH=${BUILD_SERVER}/files/$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/$OS_FOLDER
#  - tar -cvzf hds-node$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz --directory=$HOME/build/hadescoincom/hds-core/hds hds-node$HDS_TARGET_SUFFIX hds-node.cfg
#  - tar -cvzf hds-wallet-cli$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz --directory=$HOME/build/hadescoincom/hds-core/wallet/cli hds-wallet$HDS_TARGET_SUFFIX hds-wallet.cfg
#  - tar -cvzf wallet-api$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz --directory=$HOME/build/hadescoincom/hds-core/wallet/api/ wallet-api$HDS_TARGET_SUFFIX wallet-api.cfg
#  # - tar -cvzf wallet-service$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz --directory=$HOME/build/hadescoincom/hds-core/wallet/service wallet-service$HDS_TARGET_SUFFIX
#  # - tar -cvzf sbbs-monitor$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz --directory=$HOME/build/hadescoincom/hds-core/wallet/service sbbs-monitor$HDS_TARGET_SUFFIX
#  - tar -cvzf explorer-node$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz --directory=$HOME/build/hadescoincom/hds-core/explorer explorer-node$HDS_TARGET_SUFFIX explorer-node.cfg
#  - tar -cvzf broadcaster$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz --directory=$HOME/build/hadescoincom/hds-core/wallet/broadcaster broadcaster$HDS_TARGET_SUFFIX
#
#  # upload binaries to FTP
#  - curl --retry 3 --ftp-create-dirs -T hds-node$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz $BUILDS_SERVER_PATH/
#  - curl --retry 3 --ftp-create-dirs -T hds-wallet-cli$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz $BUILDS_SERVER_PATH/
#  - curl --retry 3 --ftp-create-dirs -T wallet-api$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz $BUILDS_SERVER_PATH/
#  # - curl --retry 3 --ftp-create-dirs -T wallet-service$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz $BUILDS_SERVER_PATH/
#  # - curl --retry 3 --ftp-create-dirs -T sbbs-monitor$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz $BUILDS_SERVER_PATH/
#  - curl --retry 3 --ftp-create-dirs -T explorer-node$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz $BUILDS_SERVER_PATH/
#  - curl --retry 3 --ftp-create-dirs -T broadcaster$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz $BUILDS_SERVER_PATH/
#
#  # upload binaries to FTP, to the latest folder
#  - BUILDS_SERVER_LATEST_PATH=${BUILD_SERVER}/files/$TRAVIS_BRANCH/latest/$BUILD_TYPE/$OS_FOLDER
#  - curl --retry 3 --ftp-create-dirs -T hds-node$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz $BUILDS_SERVER_LATEST_PATH/hds-node$HDS_TARGET_SUFFIX.tar.gz
#  - curl --retry 3 --ftp-create-dirs -T hds-wallet-cli$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz $BUILDS_SERVER_LATEST_PATH/hds-wallet-cli$HDS_TARGET_SUFFIX.tar.gz
#  - curl --retry 3 --ftp-create-dirs -T wallet-api$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz $BUILDS_SERVER_LATEST_PATH/wallet-api$HDS_TARGET_SUFFIX.tar.gz
#  # - curl --retry 3 --ftp-create-dirs -T wallet-service$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz $BUILDS_SERVER_LATEST_PATH/wallet-service$HDS_TARGET_SUFFIX.tar.gz
#  # - curl --retry 3 --ftp-create-dirs -T sbbs-monitor$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz $BUILDS_SERVER_LATEST_PATH/sbbs-monitor$HDS_TARGET_SUFFIX.tar.gz
#  - curl --retry 3 --ftp-create-dirs -T explorer-node$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz $BUILDS_SERVER_LATEST_PATH/explorer-node$HDS_TARGET_SUFFIX.tar.gz
#  - curl --retry 3 --ftp-create-dirs -T broadcaster$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz $BUILDS_SERVER_LATEST_PATH/broadcaster$HDS_TARGET_SUFFIX.tar.gz
#
#  # upload binaries to S3
#  - artifacts upload --target-paths "$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/$OS_FOLDER/" hds-node$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz
#  - artifacts upload --target-paths "$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/$OS_FOLDER/" hds-wallet-cli$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz
#  - artifacts upload --target-paths "$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/$OS_FOLDER/" wallet-api$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz
#  # - artifacts upload --target-paths "$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/$OS_FOLDER/" wallet-service$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz
#  # - artifacts upload --target-paths "$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/$OS_FOLDER/" sbbs-monitor$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz
#  - artifacts upload --target-paths "$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/$OS_FOLDER/" explorer-node$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz
#  - artifacts upload --target-paths "$TRAVIS_BRANCH/$(date +%Y.%m.%d)/$BUILD_TYPE/$OS_FOLDER/" broadcaster$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz
#
#  # prep for deploy to AWS S3, latest folder
#  - cp hds-node$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz hds-node$HDS_TARGET_SUFFIX.tar.gz
#  - cp hds-wallet-cli$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz hds-wallet-cli$HDS_TARGET_SUFFIX.tar.gz
#  - cp wallet-api$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz wallet-api$HDS_TARGET_SUFFIX.tar.gz
#  # - cp wallet-service$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz wallet-service$HDS_TARGET_SUFFIX.tar.gz
#  # - cp sbbs-monitor$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz sbbs-monitor$HDS_TARGET_SUFFIX.tar.gz
#  - cp explorer-node$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz explorer-node$HDS_TARGET_SUFFIX.tar.gz
#  - cp broadcaster$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz broadcaster$HDS_TARGET_SUFFIX.tar.gz
#
#  # upload binaries to S3, to the latest folder
#  - artifacts upload --target-paths "$TRAVIS_BRANCH/latest/$BUILD_TYPE/$OS_FOLDER/" hds-node$HDS_TARGET_SUFFIX.tar.gz
#  - artifacts upload --target-paths "$TRAVIS_BRANCH/latest/$BUILD_TYPE/$OS_FOLDER/" hds-wallet-cli$HDS_TARGET_SUFFIX.tar.gz
#  - artifacts upload --target-paths "$TRAVIS_BRANCH/latest/$BUILD_TYPE/$OS_FOLDER/" wallet-api$HDS_TARGET_SUFFIX.tar.gz
#  # - artifacts upload --target-paths "$TRAVIS_BRANCH/latest/$BUILD_TYPE/$OS_FOLDER/" wallet-service$HDS_TARGET_SUFFIX.tar.gz
#  # - artifacts upload --target-paths "$TRAVIS_BRANCH/latest/$BUILD_TYPE/$OS_FOLDER/" sbbs-monitor$HDS_TARGET_SUFFIX.tar.gz
#  - artifacts upload --target-paths "$TRAVIS_BRANCH/latest/$BUILD_TYPE/$OS_FOLDER/" explorer-node$HDS_TARGET_SUFFIX.tar.gz
#  - artifacts upload --target-paths "$TRAVIS_BRANCH/latest/$BUILD_TYPE/$OS_FOLDER/" broadcaster$HDS_TARGET_SUFFIX.tar.gz
deploy:
  provider: releases
  api_key: ${GITHUB_TOKEN}
  file:  # update some file
    - hds-node$HDS_TARGET_SUFFIX-$HDS_VERSION.tar.gz
    - hds-wallet-cli$HDS_TARGET_SUFFIX.tar.gz
    - wallet-api$HDS_TARGET_SUFFIX.tar.gz
    - wallet-service$HDS_TARGET_SUFFIX.tar.gz
    - sbbs-monitor$HDS_TARGET_SUFFIX.tar.gz
    - explorer-node$HDS_TARGET_SUFFIX.tar.gz
    - broadcaster$HDS_TARGET_SUFFIX.tar.gz
  skip_cleanup: true
  on:
    tags: true
notifications:
  email:
  - hadescoincom@gmail.com
